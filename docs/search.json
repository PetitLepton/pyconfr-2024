[
  {
    "objectID": "presentation.html#sencrop",
    "href": "presentation.html#sencrop",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "Sencrop",
    "text": "Sencrop\n\n35000 stations météorologiques réparties sur toute l’Europe\n\n\n\n\n  \n  température de l'air & hygrométrie\n  \n  pluviométrie\n  \n  direction et vitesse du vent\n  \n  point de rosée"
  },
  {
    "objectID": "presentation.html#spatialisation",
    "href": "presentation.html#spatialisation",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "Spatialisation",
    "text": "Spatialisation\n\nEst-ce que l’on peut fournir de la donnée météorologique de qualité sur n’importe quelle localisation sur le territoire ?\n\n\n\n\n\nutilisation de maillage h3 : index spatial hiérarchique\ncomparaison des mesures de stations avec les médianes sur les mailles"
  },
  {
    "objectID": "presentation.html#kedro-en-trois-mots",
    "href": "presentation.html#kedro-en-trois-mots",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "kedro en trois mots",
    "text": "kedro en trois mots\n\n\nlibrairie de transformations de données\n\ndécouplage entre les sources de données et les transformations\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    node2[node]\n    node7[node]\n    \n    input1[(dataset)]\n    input2[(dataset)]\n    output[(dataset)]\n    \n    input1 --&gt; node2\n    input2 --&gt; node2\n\n  subgraph pipeline[pipeline]\n    direction LR\n    node2 --&gt; node7\n    %% node3 --&gt; node5 --&gt; node7\n    %% input3 --&gt; node5\n  end\n\n  node7 --&gt; output\n\n  style pipeline color:#000\n\n\n\n\n\n\n\n\n\nnode\n\nfonction — au sens Python — avec un/des dataset d’entrée/sortie\n\npipeline\n\nséquence de node\n\ncatalog\n\nun ensemble de dataset"
  },
  {
    "objectID": "presentation.html#pipelines-nodes",
    "href": "presentation.html#pipelines-nodes",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "pipelines & nodes",
    "text": "pipelines & nodes\n\n\n\n\n\n\n\nflowchart TB\n    node2[map_locations_to_grids]\n    node7[extract_unique_grid_ids]\n    \n    input1[(locations)]\n    input2[h3-grid-resolution]\n    output[(unique-grid-ids)]\n    \n  subgraph pipeline[map_locations_to_grids]\n    direction TB\n    node2 --&gt; node7\n    %% node3 --&gt; node5 --&gt; node7\n    input1 --&gt; node2\n    input2 --&gt; node2\n    %% input3 --&gt; node5\n    node7 --&gt; output\n  end\n\n  style pipeline color:#000\n\n\n\n\n\n\n\n\n\n\n\n/src/pipelines/map_locations_to_grids/pipeline.py\n\nfrom typing import Any\nfrom kedro.pipeline import Pipeline, node\nfrom .nodes import map_locations_to_grids, extract_unique_grid_ids\n\n\ndef create_pipeline(**kwargs: Any) -&gt; Pipeline:\n    return Pipeline(\n        nodes=[\n            node(\n                map_locations_to_grids,\n                inputs={\n                    \"locations\": \"locations\",\n                    \"resolution\": \"params:h3-grid-resolution\",\n                },\n                outputs=\"grids\",\n            ),\n            node(\n                extract_unique_grid_ids,\n                inputs={\"grids\": \"grids\"},\n                outputs=\"unique-grid-ids\",\n            )\n        ],\n    )\n\n\n\n\n\n/src/pipelines/map_locations_to_grids/nodes.py\n\nimport h3\nimport pandas\n\n\ndef map_locations_to_grids(\n    locations: pandas.DataFrame, resolution: int\n) -&gt; pandas.DataFrame:\n    return pandas.DataFrame(\n        data=[\n            {\n                \"location_id\": location[\"id\"],\n                \"grid_id\": h3.geo_to_h3(\n                    lat=location[\"latitude\"],\n                    lng=location[\"longitude\"],\n                    resolution=resolution,\n                ),\n            }\n            for location in locations.to_dict(orient=\"records\")\n        ]\n    )\n\ndef extract_unique_grid_ids(grids: pandas.DataFrame) -&gt; pandas.DataFrame:\n    return grids[\"grid_id\"].unique()"
  },
  {
    "objectID": "presentation.html#catalog-environment",
    "href": "presentation.html#catalog-environment",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "catalog & environment",
    "text": "catalog & environment\n\ncatalog : définition des dataset d’entrée et de sortie\nenvironment : ensemble du catalog et d’un jeu de paramètres\n\n\n\n\n\n/conf/test-local/catalog.yaml\n\nlocations:\n  type: pandas.JSONDataset\n  filepath: data/01_raw/test_local/two_locations.json\n\ngrids:\n  type: pandas.JSONDataset\n  filepath: data/02_intermediate/grids.json\n\n\nkedro run --pipeline map_locations_to_grids --env test-local\n\n\n\n\n/conf/production/catalog.yaml\n\nlocations:\n  type: pandas.JSONDataset\n  filepath: s3://virtual-stations/locations.json\n\n\n\n\n\n\n\nkedro run --pipeline map_locations_to_grids --env production"
  },
  {
    "objectID": "presentation.html#structure-du-projet",
    "href": "presentation.html#structure-du-projet",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "structure du projet",
    "text": "structure du projet\n\nséparation des sources de données et des pipelines\n\n.\n├── conf\n│   ├── base\n│   │   ├── catalog.yml\n│   │   └── parameters.yml\n│   └── local\n│       └── credentials.yml\n├── data\n│   ├── 01_raw\n│   └── ...\n├── notebooks\n├── pyproject.toml\n└── src\n    └── my_project\n        ├── pipeline_registry.py\n        └── pipelines\n            └── my_pipeline\n                ├── nodes.py\n                └── pipeline.py"
  },
  {
    "objectID": "presentation.html#dumas-du-tuyau-trois-écrivains-et-un-lecteur",
    "href": "presentation.html#dumas-du-tuyau-trois-écrivains-et-un-lecteur",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "Dumas du tuyau : trois écrivains et un lecteur",
    "text": "Dumas du tuyau : trois écrivains et un lecteur\n\n\n\n\n\n\nflowchart LR\n\n    measures[(&lt;br&gt;mesures&lt;br&gt;des stations)]\n    getstatistics[&lt;br&gt;calculs&lt;br&gt;des statistiques]\n\n    meteoblue[(&lt;br&gt;meteoblue&lt;br&gt;API)]\n  getforecasts[&lt;br&gt;récupération&lt;br&gt;des prévisions]\n  gethistory[&lt;br&gt;récupération&lt;br&gt;de l'historique]\n\n    forecasts[(&lt;br&gt;prévisions)]\n    history[(&lt;br&gt;historique)]\n    statistics[(&lt;br&gt;statistiques)]\n\n    measures --&gt; getstatistics --&gt; statistics\n    meteoblue --&gt; getforecasts --&gt; forecasts\n    meteoblue --&gt; gethistory --&gt; history\n    \n    combine[&lt;br&gt;combinaison&lt;br&gt;des sources] --&gt; timeseries[(&lt;br&gt;série temporelle&lt;br&gt;finale)]\n  statistics --&gt; combine\n    forecasts --&gt; combine\n    history --&gt; combine"
  },
  {
    "objectID": "presentation.html#kafka-sur-le-rivage",
    "href": "presentation.html#kafka-sur-le-rivage",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "Kafka sur le rivage",
    "text": "Kafka sur le rivage\n\nkafka n’est pas le sujet mais c’est notre dataset de production !\n\n\n\n\n\n/conf/test-measures/catalog.yml\n\nlocations:\n  type: pandas.JSONDataset\n  filepath: data/01_raw/test_measures/locations.json\n\nformatted_measures_on_grids:\n  type: pandas.CSVDataset\n  filepath: data/03_primary/test_measures/measures_on_grids.csv\n\n  \n\n\nkedro run --pipeline fetch_measures_on_grids --env test-measures\n\n\n\n/conf/production/catalog.yml\n\nlocations:\n  type: pandas.JSONDataset\n  filepath: s3://virtual-stations/virtual-stations.json\n\nformatted_measures_on_grids:\n  type: datasets.ConfluentKafkaAvroDataset\n  save_args:\n    topic: h3_cells_time_series\n    ...\n\n\nkedro run --pipeline fetch_measures_on_grids --env production"
  },
  {
    "objectID": "presentation.html#la-perspective-du-manager-et-de-lingénieur",
    "href": "presentation.html#la-perspective-du-manager-et-de-lingénieur",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "La perspective du manager et de l’ingénieur",
    "text": "La perspective du manager et de l’ingénieur\n\n\nstructure rigide : expérience de développement excellente\n\nPoC à la production en un temps relativement court\n\n\n\n\n\nréactivité de la communauté : Slack avec 2200 inscrit·es\n\n\n\n\nvers un pipeline agnostique\n\ncode des node dépend encore des libraries : pandas/polars/spark\nnouvelles librairies pour palier cette dépendance : ibis, narwhal"
  },
  {
    "objectID": "presentation.html#lensemble-du-tuyau",
    "href": "presentation.html#lensemble-du-tuyau",
    "title": "Python & kedropourl’agriculture de précision",
    "section": "L’ensemble du tuyau",
    "text": "L’ensemble du tuyau"
  }
]